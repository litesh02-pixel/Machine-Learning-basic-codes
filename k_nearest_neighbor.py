# -*- coding: utf-8 -*-
"""k_nearest_neighbor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xwEI0OPOXRM_CZUytD3ZTTLSHbJx9cL0
"""

import numpy as np
import statistics

class KNN_Classifier():
  def __init__(self, distance_metrics):
    self.distance_metrics = distance_metrics
    
  def get_distnace_metrics(self, training_data_point, test_data_point):

    if (self.distance_metrics=='euclidean'):
      dist = 0
      for i in range(len(training_data_point)-1):
        dist = dist + (training_data_point[i] - test_data_point[i])**2

      euclidean_distance = np.sqrt(dist)
      return euclidean_distance

    elif (self.distance_metrics=='manhattan'):
      
      dist = 0
      for i in range(len(training_data_point)-1):
        dist = dist + abs(training_data_point[i] - test_data_point[i])

      manhattan_dist = dist
      return manhattan_dist

  def nearest_neighbors(self, x_train, test_data, k):
    distance_list = []
    for training_data in x_train:
      distance = self.get_distnace_metrics(training_data, test_data)
      distance_list.append((training_data, distance))

    distance_list.sort(key=lambda x:x[1])
    neighbors_list = []
    for j in range(k):
      neighbors_list.append(distance_list[j][0])
    return neighbors_list

  def predict(self, x_train, test_data, k):
    neighbors = self.nearest_neighbors(x_train, test_data, k)
    for data in neighbors:
      label = []
      label.append(data[-1])
    predicted_class = statistics.mode(label)
    return predicted_class

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

diabetes_data = pd.read_csv('/content/diabetes.csv')
diabetes_data.head()

x = diabetes_data.drop(columns='Outcome', axis=1)
y = diabetes_data['Outcome']
print(x)

print(y)

#converting the data to numpy array
x = x.to_numpy()
y = y.to_numpy()
print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)
print(x.shape, x_train.shape, x_test.shape)

print(x_train)

x_train = np.insert(x_train, 8, y_train, axis=1)
print(x_train)

x_train.shape

print(x_train[:, 8])

#model training
classifier = KNN_Classifier(distance_metrics='euclidean')
#classifier = KNN_Classifier(distance_metrics='manhattan')
prediction = classifier.predict(x_train, x_test[0], k=5)
print(y_test[0])

x_test.shape

x_test_size = x_test.shape[0]
print(x_test_size)

y_pred = []
for i in range (x_test_size):
  prediction = classifier.predict(x_train, x_test[i], k=5)
  y_pred.append(prediction)
print(y_pred)

y_true = y_test

#model evaluation
accuracy = accuracy_score(y_true, y_pred)
print(accuracy*100)

