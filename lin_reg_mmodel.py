# -*- coding: utf-8 -*-
"""Lin_Reg_mmodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1szOQrvKrm19XWWKavTWWQyki22RYUmdh

Linear Regression Model
"""

import numpy as np
#create Regression model

class Linear_Regression():
  #initiating some parameters(learning_rate and no_of_iterations)
  def __init__(self, learning_rate, no_of_iterations):
    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations
    
#fit funtion to train model with dataset
  def fit(self, x, y):
    #m= number of training dataset (no. of rows) and n = number of features (no. of columns)
    self.m, self.n = x.shape

    #initiating the weight and bias of model
    self.w = np.zeros(self.n)
    self.b = 0
    self.x = x
    self.y = y

    #implementing Gradient Descent
    for i in range(self.no_of_iterations):
      self.update_weights()
      
  def update_weights(self):
    y_prediction = self.predict(self.x)
    dw = -(2*(self.x.T).dot(self.y - y_prediction))/self.m
    db = - 2 * np.sum(self.y - y_prediction)/self.m
    self.w = self.w - self.learning_rate*dw
    self.b = self.b - self.learning_rate*db

  def predict(self, x):
    return x.dot(self.w)+self.b

