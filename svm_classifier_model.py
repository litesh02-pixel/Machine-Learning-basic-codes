# -*- coding: utf-8 -*-
"""SVM_CLassifier_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zbuvs3dxugoRXOcAUeWvriWV5ngt_USf
"""

import numpy as np

class SVM_classifier():


  # initiating the hyperparameters
  def __init__(self, learning_rate, no_of_iterations, lambda_parameter):

    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations
    self.lambda_parameter = lambda_parameter
  
  # fitting the dataset to SVM Classifier

  def fit(self, x, y):
    self.m, self.n = x.shape

    self.w = np.zeros(self.n)
    self.b = 0
    self.x = x
    self.y = y

    for i in range(self.no_of_iterations):
      self.update_weights()


  def update_weights(self):
      y_label = np.where(self.y<=0, -1, 1)

      for index, x_i in enumerate(self.x):
        condition = y_label[index]*(np.dot(x_i, self.w)-self.b)>=1

        if (condition==True):
          dw = 2 * self.lambda_parameter * self.w
          db = 0
        else:
          dw = 2 * self.lambda_parameter * self.w - np.dot(x_i, y_label[index])
          db = y_label[index] 


        self.w = self.w - self.learning_rate * dw
        self.b = self.b - self.learning_rate * db

      #predict the label for a given input value

  def predict(self,x):
      output = np.dot(x, self.w) - self.b
      predicted_labels = np.sign(output)
      y_hat = np.where(predicted_labels<=-1, 0, 1)
      return y_hat

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

diabetes_data = pd.read_csv('/content/diabetes.csv')
diabetes_data.head()

diabetes_data.shape

x = diabetes_data.drop(columns='Outcome', axis=1)
y = diabetes_data['Outcome']
print(x)

print(y)

scaler = StandardScaler()
scaler.fit(x)
standarized_data = scaler.transform(x)
print(standarized_data)

x = standarized_data
y = diabetes_data['Outcome']

print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

#training the model with SVM classifier
classifier = SVM_classifier(learning_rate=0.001, no_of_iterations=1000, lambda_parameter=0.01)

classifier.fit(x_train, y_train)
x_train_prediction = classifier.predict(x_train)
training_data_prediction = accuracy_score(y_train, x_train_prediction)
print('Accuracy of training data: ', training_data_prediction)

x_test_prediction = classifier.predict(x_test)
test_data_prediction = accuracy_score(y_test, x_test_prediction)
print("Accuracy of test data: ", test_data_prediction)

#Making predictive system
input_data= (5,166,72,19,175,25.8,0.587,51)
input_data_as_np_array = np.asarray(input_data)
#print(input_data_as_np_array)

input_data_reshaped = input_data_as_np_array.reshape(1,-1)
#print(input_data_reshaped)

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)
if prediction[0]==0:
  print('the person is not diabetic')
else:
  print('the person is diabetic')

